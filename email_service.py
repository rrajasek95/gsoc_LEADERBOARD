from __future__ import print_function
import base64
from email.mime.text import MIMEText
import httplib2
import random
import os
from googleapiclient import discovery, errors
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage

try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/sphinxcaptmailcredentials.json
SCOPES = 'https://mail.google.com/'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'SphinxCapt Donor Workflow'


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'sphinxcaptmailcredentials.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:  # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials


def create_message(sender, to, subject, message_text):
    """Create a message for an email.

    Args:
      sender: Email address of the sender.
      to: Email address of the receiver.
      subject: The subject of the email message.
      message_text: The text of the email message.

    Returns:
      An object containing a base64url encoded email object.
    """
    message = MIMEText(message_text)
    message['to'] = to
    message['from'] = sender
    message['subject'] = subject
    return {'raw': base64.urlsafe_b64encode(message.as_string())}

def send_message(service, user_id, message):
    """Send an email message.

    Args:
      service: Authorized Gmail API service instance.
      user_id: User's email address. The special value "me"
      can be used to indicate the authenticated user.
      message: Message to be sent.

    Returns:
      Sent Message.
    """

    try:
        message = (service.users().messages().send(userId=user_id, body=message)
                   .execute())
        print ('Message Id: %s' % message['id'])
        return message
    except errors.HttpError, error:
        print ('An error occurred: %s' % error)
        return None


def outgoing_mail_process(donor_email, contact_person, contact_date, contact_time, salutation,
                          main_body, closing, signature):
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('gmail', 'v1', http=http)
    mail_code = ''.join(random.choice('0123456789ABCDEF') for i in range(16))
    footer = 'This message has been generated by ' + contact_person + ' on ' + contact_date + ' at ' + contact_time + ' On behalf of SphinxCapt Project,CMU' + \
        '\n' + 'In case you wish to reply to this mail please include the same subject line for automated tracking.\n\n' + \
        'TrackCode#' + mail_code
    subject_line = 'Donation request from SphinxCapt Project (TrackCode#' + \
        mail_code + ')'
    msg_body = salutation + '\n\n' + main_body + '\n\n' + \
        closing + '\n\n' + signature + '\n\n' + footer
    draft_message = create_message(
        'SphinxCapt Mail', donor_email, subject_line, msg_body)
    message_obj = send_message(service, 'me', message=draft_message)
    return message_obj, mail_code, msg_body


def send_receipt_to_donor(donor_obj,contact_person, contact_date, contact_time,link):
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('gmail', 'v1', http=http)
    mail_code = ''.join(random.choice('0123456789ABCDEF') for i in range(16))
    footer = 'This message has been generated by ' + contact_person + ' on ' + contact_date + ' at ' + contact_time + ' On behalf of SphinxCapt Project,CMU' + \
             '\n' + 'In case you wish to reply to this mail please include the same subject line for automated tracking.\n\n' + \
             'TrackCode#' + mail_code
    subject_line = 'Donation request from SphinxCapt Project (TrackCode#' + \
                   mail_code + ')'
    salutation='Dear {} {}'.format(donor_obj.title,donor_obj.name)
    main_body='Please accept our heartiest gratitude and thanks for contributing to the SphinxCapt Project with your generous donation.As per our records you have opted to receive the Donation Receipt through Email and we are happy to provide you the same for your records.Please feel free to contact us about any queries related to your donation or progress of the project. Also we would proudly display your name in our Donor Leaderboard if you have NOT opted for Anonymous Donation.\n\nLink to Donation Receipt:{}'.format(link)
    closing='Thank You for your support'
    signature='{}\nSphinxCapt Project\nCMU Sphinx\nhttp://sphinxcapt.org'.format(contact_person)
    msg_body = salutation + '\n\n' + main_body + '\n\n' + \
               closing + '\n\n' + signature + '\n\n' + footer
    draft_message = create_message(
        'SphinxCapt Mail', donor_obj.email, subject_line, msg_body)
    message_obj = send_message(service, 'me', message=draft_message)
    return message_obj, mail_code, msg_body